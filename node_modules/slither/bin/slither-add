#! /usr/bin/env node
"use strict";
const inquirer = require("inquirer");
const fs = require("fs");
const RED = "\x1b[31m";
const GREEN = "\x1b[32m";
const YELLOW = "\x1b[33m";
const WHITE = "\x1b[39m";
const BOLD = "\x1b[1m";
const CLEAR = "\x1b[0m";
const SNEK = "🐍  ";
const TEMPLATES = {
    "java": {
        limits: {
            timeout: 4,
            memory: 64
        },
        scripts: {
            compile: "javac {name}.java",
            run: "java -Xmx512M -Xss64M -DONLINE_JUDGE=false -Duser.language=en -Duser.region=US -Duser.variant=US {name}",
            cleanup: "rm {name}.class"
        }
    },
    "python": {
        limits: {
            timeout: 8,
            memory: 64
        },
        scripts: {
            run: "python {name}.py"
        }
    },
    "js": {
        limits: {
            timeout: 2,
            memory: 64
        },
        scripts: {
            run: "node {name}.js"
        }
    }
};
const questions = [
    {
        type: "input",
        name: "name",
        message: "Name"
    },
    {
        type: "list",
        name: "template",
        message: "Template",
        choices: ["Java", "Python", "JS", "None"],
        filter: (val) => val.toLowerCase()
    },
    {
        type: "input",
        name: "limits.time",
        message: "Timeout",
        default: ({ template }) => template === "none" ? undefined : TEMPLATES[template].limits.timeout,
        filter: parseFloat
    },
    {
        type: "input",
        name: "limits.memory",
        message: "Memory Limit",
        default: ({ template }) => template === "none" ? undefined : TEMPLATES[template].limits.memory,
        filter: parseFloat
    },
    {
        type: "input",
        name: "io.input",
        message: "Input",
        default: "stdin"
    },
    {
        type: "input",
        name: "io.output",
        message: "Output",
        default: "stdout"
    },
    {
        type: "input",
        name: "scripts.compile",
        message: "Build Command",
        default: ({ template }) => template === "none" ? undefined : TEMPLATES[template].scripts.compile,
    },
    {
        type: "input",
        name: "scripts.run",
        message: "Build Command",
        default: ({ template }) => template === "none" ? undefined : TEMPLATES[template].scripts.run,
    },
    {
        type: "input",
        name: "scripts.cleanup",
        message: "Build Command",
        default: ({ template }) => template === "none" ? undefined : TEMPLATES[template].scripts.cleanup,
    },
    {
        type: "list",
        name: "checker",
        message: "Checker Options",
        choices: ["Exact Match", "1e-3 Error", "1e-4 Error", "1e-6 Error"],
        filter: (val) => {
            switch (val) {
                case "Exact Match (Ignores Whitespace)": return { type: "tokens" };
                case "1e-3 Error": return { type: "abs-rel", amount: 3 };
                case "1e-4 Error": return { type: "abs-rel", amount: 4 };
                case "1e-6 Error": return { type: "abs-rel", amount: 6 };
            }
        }
    }
];
fs.readFile(".slither/config.json", (err, data) => {
    if (err) {
        console.error(`${RED}No Slither configuration found in the current directory.  Run ${WHITE}${BOLD}slither init${RED} first.${CLEAR}`);
        return;
    }
    let config = JSON.parse(data.toString());
    inquirer.prompt(questions)
        .then((answers) => {
        delete answers.template;
        answers.io.input = answers.io.input.replace("{name}", answers.name);
        answers.io.output = answers.io.output.replace("{name}", answers.name);
        answers.scripts.compile = answers.scripts.compile.replace("{name}", answers.name);
        answers.scripts.run = answers.scripts.run.replace("{name}", answers.name);
        answers.scripts.cleanup = answers.scripts.cleanup.replace("{name}", answers.name);
        config.tests.push(answers);
        fs.writeFile(".slither/config.json", JSON.stringify(config, null, "\t"), (err) => {
            if (err) {
                console.error(`${RED}File system error:`, err, `${CLEAR}`);
                return;
            }
            fs.mkdir(`.slither/${answers.name}`, (err) => {
                if (err) {
                    console.error(`${RED}File system error:`, err, `${CLEAR}`);
                    return;
                }
                console.log(`${SNEK}${GREEN}Added ${answers.name} to Slither.${CLEAR}`);
            });
        });
    })
        .catch((err) => console.log(err));
});
